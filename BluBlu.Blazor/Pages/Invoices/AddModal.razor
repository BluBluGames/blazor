@using MediatR;
@using System.Linq
@using BluBlu.Blazor.Pages.Invoices.Requests
@using BluBlu.Invoices.Domain.InvoicesAggregate
@using BluBlu.Invoices.Domain.InvoicesAggregate.Commands.Create
@inject IMediator _mediator

<div class="modal @_addModalClass bg-dark text-light" tabindex="-1" role="dialog" style="display:@_addModalDisplay">
    <div class="modal-dialog modal-xl modal-dialog-centered" role="document">
        <div class="modal-content container-fluid bg-dark text-light">
            <div class="row">
                <div class="modal-header col-12">
                    <h2 class="modal-title text-light">Add Invoice</h2>
                    <button type="button" class="btn btn-primary bg-cyan" @onclick="(e) => GenerateNextInvoiceNumberForPreviousMonth(_invoices)">Set invoice for previous month</button>
                </div>
            </div>
<div class="row">
    <div class="modal-body col-12" style="background-color: #424848">
        <EditForm class="col-12" Model="@_requestModel" OnValidSubmit="@Create">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div class="row">
                <div class="col-4">
                    <h3 style="color: #79b9d1;">Invoice Details</h3>
                    <p>
                        <InputSelect class="form-control" @bind-Value="_requestModel.SelectedLanguage" style="background-color: #424848; color: #f5f5f5; border-color: #79b9d1;">
                            @foreach (var lang in _languages)
                            {
                                <option value="@lang.Key">@lang.Value</option>
                            }
                        </InputSelect>
                        <label for="Language" style="color: #f5f5f5;">Language</label>
                    </p>
                    <p>
                        <InputSelect class="form-control" @bind-Value="_requestModel.SelectedLogo" style="background-color: #424848; color: #f5f5f5; border-color: #79b9d1;">
                            @foreach (var logo in logoFiles)
                            {
                                <option value="@logo">@logo</option>
                            }
                        </InputSelect>
                        <label for="Logo" style="color: #f5f5f5;">Logo</label>
                    </p>
                    <p>
                        <InputText class="w-100" id="InvoiceNumber" @bind-Value="_requestModel.InvoiceNumber" style="background-color: #424848; color: #f5f5f5; border-color: #79b9d1;"/>
                        <label for="InvoiceNumber" style="color: #f5f5f5;">Invoice Number</label>
                        <ValidationMessage For="@(() => _requestModel.InvoiceNumber)" style="color: red;"></ValidationMessage>
                    </p>

                    <p>
                        <InputDate class="w-100" id="DateOfInvoice" @bind-Value="_requestModel.DateOfInvoice" style="background-color: #424848; color: #f5f5f5; border-color: #79b9d1;"/>
                        <label for="DateOfInvoice" style="color: #f5f5f5;">Date of invoice</label>
                        <ValidationMessage For="@(() => _requestModel.DateOfInvoice)" style="color: red;"></ValidationMessage>
                    </p>

                    <p>
                        <InputDate class="w-100" id="DateOfRelease" @bind-Value="_requestModel.DateOfRelease" style="background-color: #424848; color: #f5f5f5; border-color: #79b9d1;"/>
                        <label for="DateOfRelease" style="color: #f5f5f5;">Date of release</label>
                        <ValidationMessage For="@(() => _requestModel.DateOfRelease)" style="color: red;"></ValidationMessage>
                    </p>

                    <p>
                        <InputDate class="w-100" id="DateOfPayment" @bind-Value="_requestModel.DateOfPayment" style="background-color: #424848; color: #f5f5f5; border-color: #79b9d1;"/>
                        <label for="FormOfPayment" style="color: #f5f5f5;">Date Of Payment</label>
                        <ValidationMessage For="@(() => _requestModel.DateOfPayment)" style="color: red;"></ValidationMessage>
                    </p>

                    <p>
                        <InputText class="w-100" id="FormOfPayment" @bind-Value="_requestModel.FormOfPayment" style="background-color: #424848; color: #f5f5f5; border-color: #79b9d1;"/>
                        <label for="FormOfPayment" style="color: #f5f5f5;">Form of payment</label>
                        <ValidationMessage For="@(() => _requestModel.FormOfPayment)" style="color: red;"></ValidationMessage>
                    </p>
                                <p>
                                    <InputText class="w-100" id="AccountNumber" @bind-Value="_requestModel.AccountNumber" style="background-color: #424848; color: #f5f5f5; border-color: #79b9d1;"/>
                                    <label for="AccountNumber" style="color: #f5f5f5;">Account Number</label>
                                    <ValidationMessage For="@(() => _requestModel.AccountNumber)"></ValidationMessage>
                                </p>
                                <p>
                                    <InputText class="w-100" id="BicSwift" @bind-Value="_requestModel.BicSwift" style="background-color: #424848; color: #f5f5f5; border-color: #79b9d1;" />
                                    <label for="BicSwift" style="color: #f5f5f5;">Bic/Swift</label>
                                    <ValidationMessage For="@(() => _requestModel.BicSwift)"></ValidationMessage>
                                </p>

                                <p>
                                    <InputCheckbox id="IsPaymentDivided" @bind-Value="_requestModel.IsPaymentDivided" style="background-color: #424848; color: #f5f5f5; border-color: #79b9d1;"/>
                                    <label for="FormOfPayment" style="color: #f5f5f5;">Is Payment Divided</label>
                                    <ValidationMessage For="@(() => _requestModel.IsPaymentDivided)"></ValidationMessage>
                                </p>

                                <p>
                                    <InputCheckbox id="IsPaid" @bind-Value="_requestModel.IsPaid" style="background-color: #424848; color: #f5f5f5; border-color: #79b9d1;"/>
                                    <label for="FormOfPayment" style="color: #f5f5f5;">Is Paid</label>
                                    <ValidationMessage For="@(() => _requestModel.IsPaid)"></ValidationMessage>
                                </p>

                                <p>
                                    <InputTextArea class="w-100" id="Remarks" @bind-Value="_requestModel.Remarks" style="background-color: #424848; color: #f5f5f5; border-color: #79b9d1;"/>
                                    <label for="Remarks" style="color: #f5f5f5;">Remarks</label>
                                    <ValidationMessage For="@(() => _requestModel.Remarks)"></ValidationMessage>
                                </p>
                            </div>
                            <div class="col-4">
                                <h3>Seller Details</h3>
                                <p>
                                    <InputText
                                        class="w-100"
                                        id="SellerNip"
                                        @bind-Value="_requestModel.Seller.Nip"
                                               style="background-color: #424848; color: #f5f5f5; border-color: #79b9d1;" />
                                    <label for="SellerNip">Nip</label>
                                    <ValidationMessage For="@(() => _requestModel.Seller.Nip)"></ValidationMessage>
                                </p>
                            
                                <p>
                                    <InputText class="w-100" id="SellerName" @bind-Value="_requestModel.Seller.Name" style="background-color: #424848; color: #f5f5f5; border-color: #79b9d1;" />
                                    <label for="SellerName">Name</label>
                                    <ValidationMessage For="@(() => _requestModel.Seller.Name)"></ValidationMessage>
                                </p>
                                
                                <p>
                                    <InputText class="w-100" id="SellerStreet" @bind-Value="_requestModel.Seller.AddressStreet" style="background-color: #424848; color: #f5f5f5; border-color: #79b9d1;" />
                                    <label for="SellerStreet">Street</label>
                                    <ValidationMessage For="@(() => _requestModel.Seller.AddressStreet)"></ValidationMessage>
                                </p>
                                
                                <p>
                                    <InputText class="w-100" id="SellerCity" @bind-Value="_requestModel.Seller.AddressPostCity" style="background-color: #424848; color: #f5f5f5; border-color: #79b9d1;" />
                                    <label for="SellerCity">City</label>
                                    <ValidationMessage For="@(() => _requestModel.Seller.AddressPostCity)"></ValidationMessage>
                                </p>
                                
                                <p>
                                    <InputText class="w-100" id="SellerCountry" @bind-Value="_requestModel.Seller.AddressCountry" style="background-color: #424848; color: #f5f5f5; border-color: #79b9d1;" />
                                    <label for="SellerCountry">Country</label>
                                    <ValidationMessage For="@(() => _requestModel.Seller.AddressCountry)"></ValidationMessage>
                                </p>
                                
                                <p>
                                    <InputText class="w-100" id="SellerPostCode" @bind-Value="_requestModel.Seller.AddressPostCode" style="background-color: #424848; color: #f5f5f5; border-color: #79b9d1;" />
                                    <label for="SellerPostCode">Post Code</label>
                                    <ValidationMessage For="@(() => _requestModel.Seller.AddressPostCode)"></ValidationMessage>
                                </p>
                                
                                <p>
                                    <InputText class="w-100" id="SellerBuildingNumber" @bind-Value="_requestModel.Seller.AddressBuildingNumber" style="background-color: #424848; color: #f5f5f5; border-color: #79b9d1;" />
                                    <label for="SellerBuildingNumber">Building Number</label>
                                    <ValidationMessage For="@(() => _requestModel.Seller.AddressBuildingNumber)"></ValidationMessage>
                                </p>
                                
                                <p>
                                    <InputText class="w-100" id="SellerFlatNumber" @bind-Value="_requestModel.Seller.AddressFlatNumber" style="background-color: #424848; color: #f5f5f5; border-color: #79b9d1;" />
                                    <label for="SellerFlatNumber">Flat Number</label>
                                    <ValidationMessage For="@(() => _requestModel.Seller.AddressFlatNumber)"></ValidationMessage>
                                </p>
                            </div>
                            <div class="col-4">
                                <h3>Buyer Details</h3>
                                <p>
                                    <InputText class="w-100" id="BuyerNip" @bind-Value="_requestModel.Buyer.Nip" style="background-color: #424848; color: #f5f5f5; border-color: #79b9d1;"/>
                                    <label for="BuyerNip">Nip</label>
                                    <ValidationMessage For="@(() => _requestModel.Buyer.Nip)"></ValidationMessage>
                                </p>
                            
                                <p>
                                    <InputText class="w-100" id="BuyerName" @bind-Value="_requestModel.Buyer.Name" style="background-color: #424848; color: #f5f5f5; border-color: #79b9d1;" />
                                    <label for="BuyerName">Name</label>
                                    <ValidationMessage For="@(() => _requestModel.Buyer.Name)"></ValidationMessage>
                                </p>
                            
                                <p>
                                    <InputText class="w-100" id="BuyerStreet" @bind-Value="_requestModel.Buyer.AddressStreet" style="background-color: #424848; color: #f5f5f5; border-color: #79b9d1;"/>
                                    <label for="BuyerStreet">Street</label>
                                    <ValidationMessage For="@(() => _requestModel.Buyer.AddressStreet)"></ValidationMessage>
                                </p>
                            
                                <p>
                                    <InputText class="w-100" id="BuyerCity" @bind-Value="_requestModel.Buyer.AddressPostCity" style="background-color: #424848; color: #f5f5f5; border-color: #79b9d1;"/>
                                    <label for="BuyerCity">City</label>
                                    <ValidationMessage For="@(() => _requestModel.Buyer.AddressPostCity)"></ValidationMessage>
                                </p>
                            
                                <p>
                                    <InputText class="w-100" id="BuyerCountry" @bind-Value="_requestModel.Buyer.AddressCountry" style="background-color: #424848; color: #f5f5f5; border-color: #79b9d1;"/>
                                    <label for="BuyerCountry">Country</label>
                                    <ValidationMessage For="@(() => _requestModel.Buyer.AddressCountry)"></ValidationMessage>
                                </p>
                            
                                <p>
                                    <InputText class="w-100" id="BuyerPostCode" @bind-Value="_requestModel.Buyer.AddressPostCode" style="background-color: #424848; color: #f5f5f5; border-color: #79b9d1;" />
                                    <label for="BuyerPostCode">Post Code</label>
                                    <ValidationMessage For="@(() => _requestModel.Buyer.AddressPostCode)"></ValidationMessage>
                                </p>
                            
                                <p>
                                    <InputText class="w-100" id="BuyerBuildingNumber" @bind-Value="_requestModel.Buyer.AddressBuildingNumber" style="background-color: #424848; color: #f5f5f5; border-color: #79b9d1;"/>
                                    <label for="BuyerPostCode">Building Number</label>
                                    <ValidationMessage For="@(() => _requestModel.Buyer.AddressBuildingNumber)"></ValidationMessage>
                                </p>
                            
                                <p>
                                    <InputText class="w-100" id="BuyerFlatNumber" @bind-Value="_requestModel.Buyer.AddressFlatNumber" style="background-color: #424848; color: #f5f5f5; border-color: #79b9d1;" />
                                    <label for="BuyerFlatNumber">Flat Number</label>
                                    <ValidationMessage For="@(() => _requestModel.Buyer.AddressFlatNumber)"></ValidationMessage>
                                </p>
                            </div>
                            <div class="col-12" id="products">
                                <h3>Products</h3>
                                @foreach (var product in _requestModel.Products.Select((value, index) => new { index, value }))
                                {
                                    var idName = $"{product.value.Name}-{product.index}-Name";
                                    var idLegalBasisForTaxExemption = $"{product.value.LegalBasisForTaxExemption}-{product.index}-LegalBasisForTaxExemption";
                                    var idPriceNet = $"{product.value.Name}-{product.index}-Name";
                                    var idNumberOfUnits = $"{product.value.Name}-{product.index}-Name";
                                    var idUnitName = $"{product.value.Name}-{product.index}-Name";
                                    var idVat = $"{product.value.Name}-{product.index}-Name";
                                    var idIsVatZw = $"{product.value.Name}-{product.index}-IsVatZw";
                            
                                    <div class="row g-2">
                                        <div class="col-4">
                                            <InputText class="w-100" id="@idName" @bind-Value="_requestModel.Products.ToList()[product.index].Name" style="background-color: #424848; color: #f5f5f5; border-color: #79b9d1;" />
                                            <label for="@idName">Name</label>
                                            <ValidationMessage For="@(() => _requestModel.Products.ToList()[product.index].Name)"></ValidationMessage>
                                        </div>
                            
                                        <div class="col-4">
                                            <InputText class="w-100" id="@idLegalBasisForTaxExemption" @bind-Value="_requestModel.Products.ToList()[product.index].LegalBasisForTaxExemption" style="background-color: #424848; color: #f5f5f5; border-color: #79b9d1;" />
                                            <label for="@idLegalBasisForTaxExemption">Tax Exemption Basis</label>
                                            <ValidationMessage For="@(() => _requestModel.Products.ToList()[product.index].LegalBasisForTaxExemption)"></ValidationMessage>
                                        </div>
                            
                                        <div class="col-2">
                                            <InputNumber class="w-100" id="@idPriceNet" @bind-Value="_requestModel.Products.ToList()[product.index].PriceNet" style="background-color: #424848; color: #f5f5f5; border-color: #79b9d1;"/>
                                            <label for="@idPriceNet">Price per Unit</label>
                                            <ValidationMessage For="@(() => _requestModel.Products.ToList()[product.index].PriceNet)"></ValidationMessage>
                                        </div>
                            
                                        <div class="col-1">
                                            <InputNumber class="w-100" id="@idNumberOfUnits" @bind-Value="_requestModel.Products.ToList()[product.index].NumberOfUnits" style="background-color: #424848; color: #f5f5f5; border-color: #79b9d1;" />
                                            <label for="@idNumberOfUnits">Units</label>
                                            <ValidationMessage For="@(() => _requestModel.Products.ToList()[product.index].NumberOfUnits)"></ValidationMessage>
                                        </div>
                            
                                        <div class="col-1">
                                            <InputText class="w-100" id="@idUnitName" @bind-Value="_requestModel.Products.ToList()[product.index].UnitName" style="background-color: #424848; color: #f5f5f5; border-color: #79b9d1;"/>
                                            <label for="@idUnitName">Unit Name</label>
                                            <ValidationMessage For="@(() => _requestModel.Products.ToList()[product.index].UnitName)"></ValidationMessage>
                                        </div>
                            
                                        <div class="col-1">
                                            <InputNumber class="w-100" id="@idVat" @bind-Value="_requestModel.Products.ToList()[product.index].Vat" style="background-color: #424848; color: #f5f5f5; border-color: #79b9d1;" />
                                            <label for="@idVat">Vat</label>
                                            <ValidationMessage For="@(() => _requestModel.Products.ToList()[product.index].Vat)"></ValidationMessage>
                                        </div>
                            
                                        <div class="col-1">
                                            <InputCheckbox class="w-100" id="@idIsVatZw" @bind-Value="_requestModel.Products.ToList()[product.index].IsVatZw" style="background-color: #424848; color: #f5f5f5; border-color: #79b9d1;" />
                                            <label for="@idIsVatZw">Is Vat Zw</label>
                                            <ValidationMessage For="@(() => _requestModel.Products.ToList()[product.index].IsVatZw)"></ValidationMessage>
                                        </div>
                                        
                                        <div class="col-1">
                                            <button type="button" class="btn btn-primary" @onclick="(e) => RecalculateFromBruttoToNetto(_requestModel.Products.ToList()[product.index].PriceNet, _requestModel.Products.ToList()[product.index].Vat, product.index)">Recalculate Brutto to Netto</button>
                                        </div>
                                    </div>
                                }
                            
                                <button type="button" class="btn btn-primary" @onclick="() => AddProduct()">Add Product</button>
                            </div>
                        </div>
                    </EditForm>
                </div>

            </div>
            <div class="row">
                <div class="modal-footer col-12">
                    <button type="submit" class="btn btn-primary" @onclick="() => Create()">Save changes</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Close()">Close</button>
                </div>
            </div>
        </div>
    </div>
</div>




@if (_showBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter]
    public EventCallback<Invoice> OnInvoiceAdded { get; set; }

    private string _addModalDisplay = "none;";
    private string _addModalClass = "";
    private bool _showBackdrop;
    private List<Invoice> _invoices = null!;

    private Dictionary<string, string> _languages = new Dictionary<string, string>
    {
        { "en", "English" },
        { "pl", "Polish" },
    };

    private List<string?> logoFiles = new List<string?>();

    private InvoiceRequestModel _requestModel = new()
    {
        InvoiceNumber = string.Empty,
        SelectedLanguage = string.Empty,
        SelectedLogo = string.Empty,
        DateOfInvoice = DateTime.Now,
        DateOfRelease = DateTime.Now,
        DateOfPayment = DateTime.Now.AddDays(14),
        FormOfPayment = string.Empty,
        AccountNumber = string.Empty,
        BicSwift = string.Empty,
        IsPaymentDivided = false,
        IsPaid = false,
        Remarks = string.Empty,
        Seller = new ContractorRequestModel {Name = string.Empty, AddressStreet = string.Empty, AddressPostCity = string.Empty, AddressCountry = string.Empty, AddressPostCode = string.Empty, AddressBuildingNumber = string.Empty, AddressFlatNumber = string.Empty, Nip = string.Empty},
        Buyer = new ContractorRequestModel {Name = string.Empty, AddressStreet = string.Empty, AddressPostCity = string.Empty, AddressCountry = string.Empty, AddressPostCode = string.Empty, AddressBuildingNumber = string.Empty, AddressFlatNumber = string.Empty, Nip = string.Empty},
        Products = new List<ProductRequestModel>()
    };

    protected override void OnInitialized()
    {
        var logoDirectoryPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "./Storage/Img");
        if (Directory.Exists(logoDirectoryPath))
        {
            logoFiles = Directory.GetFiles(logoDirectoryPath)
                                 .Where(file => file.EndsWith(".png") || file.EndsWith(".jpg")) // filter png files
                                 .Select(Path.GetFileName) // if you only want to display file names
                                 .ToList();
        }
    }
    
    private InvoiceRequestModel CloneInvoiceData(Invoice invoiceToClone, List<Invoice> invoices)
    {
        _invoices = invoices;
        return new InvoiceRequestModel
        {
            InvoiceNumber = GenerateNextInvoiceNumber(invoices),
            SelectedLanguage = invoiceToClone.SelectedLanguage.Value ?? string.Empty,
            SelectedLogo = invoiceToClone.SelectedLogo.Value ?? string.Empty,
            DateOfInvoice = LastDayOfTheMonth(),
            DateOfRelease = LastDayOfTheMonth(),
            DateOfPayment = LastDayOfTheMonth().AddDays(14),
            FormOfPayment = invoiceToClone.FormOfPayment?.Value ?? string.Empty,
            AccountNumber = invoiceToClone.AccountNumber?.Value ?? string.Empty,
            BicSwift = invoiceToClone.BicSwift?.Value ?? string.Empty,
            IsPaymentDivided = invoiceToClone.IsPaymentDivided.Value,
            IsPaid = invoiceToClone.IsPaid.Value,
            Remarks = invoiceToClone.Remarks?.Value ?? string.Empty,
            Seller = new ContractorRequestModel
            {
                Name = invoiceToClone.Seller.Name.Value ?? string.Empty, 
                AddressStreet = invoiceToClone.Seller.Address.Street.Value ?? string.Empty, 
                AddressPostCity = invoiceToClone.Seller.Address.PostCity.Value ?? string.Empty, 
                AddressCountry = invoiceToClone.Seller.Address.Country.Value ?? string.Empty, 
                AddressPostCode = invoiceToClone.Seller.Address.PostCode.Value ?? string.Empty, 
                AddressBuildingNumber = invoiceToClone.Seller.Address.BuildingNumber.Value ?? string.Empty, 
                AddressFlatNumber = invoiceToClone.Seller.Address.FlatNumber?.Value ?? string.Empty, 
                Nip = invoiceToClone.Seller.Nip?.Value ?? string.Empty
            },
            Buyer = new ContractorRequestModel 
            {
                Name = invoiceToClone.Buyer.Name.Value ?? string.Empty,
                AddressStreet = invoiceToClone.Buyer.Address.Street.Value ?? string.Empty,
                AddressPostCity = invoiceToClone.Buyer.Address.PostCity.Value ?? string.Empty,
                AddressCountry = invoiceToClone.Buyer.Address.Country.Value ?? string.Empty,
                AddressPostCode = invoiceToClone.Buyer.Address.PostCode.Value ?? string.Empty,
                AddressBuildingNumber = invoiceToClone.Buyer.Address.BuildingNumber.Value ?? string.Empty,
                AddressFlatNumber = invoiceToClone.Buyer.Address.FlatNumber?.Value ?? string.Empty,
                Nip = invoiceToClone.Buyer.Nip?.Value ?? string.Empty
        
            },
            Products = invoiceToClone.Products.Select(product => new ProductRequestModel
            {
                Name = product.Product.Name.Value ?? string.Empty,
                PriceNet = product.Product.PriceNet.Value,
                NumberOfUnits = product.NumberOfUnits.Value,
                UnitName = product.Product.UnitName.Value ?? string.Empty,
                Vat = product.Product.Vat.Value,
                IsVatZw = product.Product.IsVatZw.Value,
                PriceGross = product.Product.PriceGross.Value,
                LegalBasisForTaxExemption = product.Product.LegalBasisForTaxExemption?.Value ?? string.Empty
            }).ToList()
        };
    }

    private string GenerateNextInvoiceNumber(List<Invoice> invoices)
    {
        var currentMonth = DateTime.Now.Month;
        var nextInvoiceNumber = 1;
        
        if (invoices.Any())
        {
            var invoiceFromCurrentMonth = invoices
                .Where(x => int.Parse(x.InvoiceNumber.Value?.Substring(5, 2)!) == currentMonth)
                .OrderByDescending(x => x.InvoiceNumber.Value?[..4])
                .FirstOrDefault()?.InvoiceNumber.Value;

            nextInvoiceNumber = invoiceFromCurrentMonth != null ? 
                int.Parse(invoiceFromCurrentMonth?.Substring(1, 3)!) + 1 : 1;
        }
        
        var invoiceNumber = $"F{nextInvoiceNumber:000}-{DateTime.Now.Month:00}-{DateTime.Now.Year}";
        return invoiceNumber;
    }
    
    private void GenerateNextInvoiceNumberForPreviousMonth(List<Invoice> invoices)
    {
        var currentMonth = DateTime.Now.AddMonths(-1).Month;
        var nextInvoiceNumber = 1;
        
        if (invoices.Any())
        {
            var invoiceFromCurrentMonth = invoices
                .Where(x => int.Parse(x.InvoiceNumber.Value?.Substring(5, 2)!) == currentMonth)
                .OrderByDescending(x => x.InvoiceNumber.Value?[..4])
                .FirstOrDefault()?.InvoiceNumber.Value;

            nextInvoiceNumber = invoiceFromCurrentMonth != null ? 
                int.Parse(invoiceFromCurrentMonth?.Substring(1, 3)!) + 1 : 1;
        }
        
        _requestModel.InvoiceNumber = $"F{nextInvoiceNumber:000}-{DateTime.Now.AddMonths(-1).Month:00}-{DateTime.Now.Year}";
        
        var year = DateTime.Now.Year;
        var month = DateTime.Now.Month;
        if (month == 1)
        {
            year -= 1;
        }
        _requestModel.InvoiceNumber = $"F{nextInvoiceNumber:000}-{DateTime.Now.AddMonths(-1).Month:00}-{year}";
        SetLastDayOfPreviousMonth();
    }

    private DateTime LastDayOfTheMonth() => new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1).AddMonths(1).AddDays(-1);
    private void SetLastDayOfPreviousMonth()
    {
        DateTime today = DateTime.Now;
        int year = today.Year;
        int month = today.Month;
        // Subtract one month from the current date to get the previous month
        DateTime previousMonth = new DateTime(year, month, 1).AddMonths(-1);
        // Use the DateTime.DaysInMonth method to get the number of days in the previous month
        int lastDayOfPreviousMonth = DateTime.DaysInMonth(previousMonth.Year, previousMonth.Month);
        // Create a new DateTime object for the last day of the previous month
        DateTime lastDay = new DateTime(previousMonth.Year, previousMonth.Month, lastDayOfPreviousMonth);
        _requestModel.DateOfInvoice = lastDay;
        _requestModel.DateOfRelease = lastDay;
        _requestModel.DateOfPayment = lastDay.AddDays(14);
    }
    
    public void Open()
    {
        _addModalDisplay = "block;";
        _addModalClass = "Show";
        _showBackdrop = true;
        StateHasChanged();
    }
    
    public void Open(Invoice invoiceToClone, List<Invoice> invoices)
    {
        _invoices = invoices;
        _addModalDisplay = "block;";
        _addModalClass = "Show";
        _showBackdrop = true;
        _requestModel = CloneInvoiceData(invoiceToClone, invoices);
        StateHasChanged();
    }
    
    // public void Update(Invoice invoiceToClone, List<Invoice> invoices)
    // {
    //     _addModalDisplay = "block;";
    //     _addModalClass = "Show";
    //     _showBackdrop = true;
    //     _requestModel = CloneInvoiceData(invoiceToClone, invoices);
    //     StateHasChanged();
    // }

    private void Close()
    {
        _addModalDisplay = "none";
        _addModalClass = "";
        _showBackdrop = false;
        StateHasChanged();
    }
    
    private void AddProduct()
    {
        _requestModel.Products.Add(new ProductRequestModel
        { Name = string.Empty, PriceNet = 0, NumberOfUnits = 1, UnitName = string.Empty, Vat = 23, PriceGross = 0 });
    }

    private async Task Create()
    {
        var invoice = _requestModel.ToDomainModel();
        await _mediator.Send(new CreateInvoiceCommand { Invoice = invoice });
        await OnInvoiceAdded.InvokeAsync(invoice);
        Close();
    }

    private void RecalculateFromBruttoToNetto(decimal priceNet, decimal vat, int index)
    {
    // Calculate the VAT multiplier
        decimal vatMultiplier = vat / 100 + 1;
    
    // Calculate the net price from the gross price and VAT
        decimal priceNetNew = Math.Round(priceNet / vatMultiplier, 2);
        
    // Update the price net for the product in the list
        _requestModel.Products.ToList()[index].PriceNet = priceNetNew;
    }

}