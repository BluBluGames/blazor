@using MediatR;
@using System.Linq
@using BluBlu.Blazor.Pages.Invoices.Requests
@using BluBlu.Invoices.Domain.InvoicesAggregate
@using BluBlu.Invoices.Domain.InvoicesAggregate.Commands.Create
@inject IMediator _mediator

<div class="modal @_addModalClass" tabindex="-1" role="dialog" style="display:@_addModalDisplay">
    <div class="modal-dialog modal-xl modal-dialog-centered" role="document">
        <div class="modal-content container-fluid">
            <div class="row">
                <div class="modal-header col-12">
                    <h2 class="modal-title">Add Invoice</h2>
                </div>
            </div>

            <div class="row">
                <div class="modal-body col-12">
                    <EditForm class="col-12" Model="@_requestModel" OnValidSubmit="@Create">
                        <DataAnnotationsValidator></DataAnnotationsValidator>
                        <div class="row">
                            <div class="col-4">
                                <h3>Invoice Details</h3>
                                <p>
                                    <InputText class="w-100" id="InvoiceNumber" @bind-Value="_requestModel.InvoiceNumber"/>
                                    <label for="InvoiceNumber">Invoice Number</label>
                                    <ValidationMessage For="@(() => _requestModel.InvoiceNumber)"></ValidationMessage>
                                </p>

                                <p>
                                    <InputDate class="w-100" id="DateOfInvoice" @bind-Value="_requestModel.DateOfInvoice"/>
                                    <label for="DateOfInvoice">Date of invoice</label>
                                    <ValidationMessage For="@(() => _requestModel.DateOfInvoice)"></ValidationMessage>
                                </p>

                                <p>
                                    <InputDate class="w-100" id="DateOfRelease" @bind-Value="_requestModel.DateOfRelease"/>
                                    <label for="DateOfRelease">Date of release</label>
                                    <ValidationMessage For="@(() => _requestModel.DateOfRelease)"></ValidationMessage>
                                </p>

                                <p>
                                    <InputDate class="w-100" id="DateOfPayment" @bind-Value="_requestModel.DateOfPayment"/>
                                    <label for="FormOfPayment">Date Of Payment</label>
                                    <ValidationMessage For="@(() => _requestModel.DateOfPayment)"></ValidationMessage>
                                </p>

                                <p>
                                    <InputText class="w-100" id="FormOfPayment" @bind-Value="_requestModel.FormOfPayment"/>
                                    <label for="FormOfPayment">Form of payment</label>
                                    <ValidationMessage For="@(() => _requestModel.FormOfPayment)"></ValidationMessage>
                                </p>

                                <p>
                                    <InputText class="w-100" id="AccountNumber" @bind-Value="_requestModel.AccountNumber"/>
                                    <label for="AccountNumber">Account Number</label>
                                    <ValidationMessage For="@(() => _requestModel.AccountNumber)"></ValidationMessage>
                                </p>

                                <p>
                                    <InputCheckbox id="IsPaymentDivided" @bind-Value="_requestModel.IsPaymentDivided"/>
                                    <label for="FormOfPayment">Is Payment Divided</label>
                                    <ValidationMessage For="@(() => _requestModel.IsPaymentDivided)"></ValidationMessage>
                                </p>

                                <p>
                                    <InputCheckbox id="IsPaid" @bind-Value="_requestModel.IsPaid"/>
                                    <label for="FormOfPayment">Is Paid</label>
                                    <ValidationMessage For="@(() => _requestModel.IsPaid)"></ValidationMessage>
                                </p>

                                <p>
                                    <InputTextArea class="w-100" id="Remarks" @bind-Value="_requestModel.Remarks"/>
                                    <label for="Remarks">Remarks</label>
                                    <ValidationMessage For="@(() => _requestModel.Remarks)"></ValidationMessage>
                                </p>
                            </div>
                            <div class="col-4">
                                <h3>Seller Details</h3>
                                <p>
                                    <InputText
                                        class="w-100"
                                        id="SellerNip"
                                        @bind-Value="_requestModel.Seller.Nip"
                                        />
                                    <label for="SellerNip">Nip</label>
                                    <ValidationMessage For="@(() => _requestModel.Seller.Nip)"></ValidationMessage>
                                </p>
                            
                                <p>
                                    <InputText class="w-100" id="SellerName" @bind-Value="_requestModel.Seller.Name"/>
                                    <label for="SellerName">Name</label>
                                    <ValidationMessage For="@(() => _requestModel.Seller.Name)"></ValidationMessage>
                                </p>
                                
                                <p>
                                    <InputText class="w-100" id="SellerStreet" @bind-Value="_requestModel.Seller.AddressStreet"/>
                                    <label for="SellerStreet">Street</label>
                                    <ValidationMessage For="@(() => _requestModel.Seller.AddressStreet)"></ValidationMessage>
                                </p>
                                
                                <p>
                                    <InputText class="w-100" id="SellerCity" @bind-Value="_requestModel.Seller.AddressPostCity"/>
                                    <label for="SellerCity">City</label>
                                    <ValidationMessage For="@(() => _requestModel.Seller.AddressPostCity)"></ValidationMessage>
                                </p>
                                
                                <p>
                                    <InputText class="w-100" id="SellerCountry" @bind-Value="_requestModel.Seller.AddressCountry"/>
                                    <label for="SellerCountry">Country</label>
                                    <ValidationMessage For="@(() => _requestModel.Seller.AddressCountry)"></ValidationMessage>
                                </p>
                                
                                <p>
                                    <InputText class="w-100" id="SellerPostCode" @bind-Value="_requestModel.Seller.AddressPostCode"/>
                                    <label for="SellerPostCode">Post Code</label>
                                    <ValidationMessage For="@(() => _requestModel.Seller.AddressPostCode)"></ValidationMessage>
                                </p>
                                
                                <p>
                                    <InputText class="w-100" id="SellerBuildingNumber" @bind-Value="_requestModel.Seller.AddressBuildingNumber"/>
                                    <label for="SellerBuildingNumber">Building Number</label>
                                    <ValidationMessage For="@(() => _requestModel.Seller.AddressBuildingNumber)"></ValidationMessage>
                                </p>
                                
                                <p>
                                    <InputText class="w-100" id="SellerFlatNumber" @bind-Value="_requestModel.Seller.AddressFlatNumber"/>
                                    <label for="SellerFlatNumber">Flat Number</label>
                                    <ValidationMessage For="@(() => _requestModel.Seller.AddressFlatNumber)"></ValidationMessage>
                                </p>
                            </div>
                            <div class="col-4">
                                <h3>Buyer Details</h3>
                                <p>
                                    <InputText class="w-100" id="BuyerNip" @bind-Value="_requestModel.Buyer.Nip"/>
                                    <label for="BuyerNip">Nip</label>
                                    <ValidationMessage For="@(() => _requestModel.Buyer.Nip)"></ValidationMessage>
                                </p>
                            
                                <p>
                                    <InputText class="w-100" id="BuyerName" @bind-Value="_requestModel.Buyer.Name"/>
                                    <label for="BuyerName">Name</label>
                                    <ValidationMessage For="@(() => _requestModel.Buyer.Name)"></ValidationMessage>
                                </p>
                            
                                <p>
                                    <InputText class="w-100" id="BuyerStreet" @bind-Value="_requestModel.Buyer.AddressStreet"/>
                                    <label for="BuyerStreet">Street</label>
                                    <ValidationMessage For="@(() => _requestModel.Buyer.AddressStreet)"></ValidationMessage>
                                </p>
                            
                                <p>
                                    <InputText class="w-100" id="BuyerCity" @bind-Value="_requestModel.Buyer.AddressPostCity"/>
                                    <label for="BuyerCity">City</label>
                                    <ValidationMessage For="@(() => _requestModel.Buyer.AddressPostCity)"></ValidationMessage>
                                </p>
                            
                                <p>
                                    <InputText class="w-100" id="BuyerCountry" @bind-Value="_requestModel.Buyer.AddressCountry"/>
                                    <label for="BuyerCountry">Country</label>
                                    <ValidationMessage For="@(() => _requestModel.Buyer.AddressCountry)"></ValidationMessage>
                                </p>
                            
                                <p>
                                    <InputText class="w-100" id="BuyerPostCode" @bind-Value="_requestModel.Buyer.AddressPostCode"/>
                                    <label for="BuyerPostCode">Post Code</label>
                                    <ValidationMessage For="@(() => _requestModel.Buyer.AddressPostCode)"></ValidationMessage>
                                </p>
                            
                                <p>
                                    <InputText class="w-100" id="BuyerBuildingNumber" @bind-Value="_requestModel.Buyer.AddressBuildingNumber"/>
                                    <label for="BuyerPostCode">Building Number</label>
                                    <ValidationMessage For="@(() => _requestModel.Buyer.AddressBuildingNumber)"></ValidationMessage>
                                </p>
                            
                                <p>
                                    <InputText class="w-100" id="BuyerFlatNumber" @bind-Value="_requestModel.Buyer.AddressFlatNumber"/>
                                    <label for="BuyerFlatNumber">Flat Number</label>
                                    <ValidationMessage For="@(() => _requestModel.Buyer.AddressFlatNumber)"></ValidationMessage>
                                </p>
                            </div>
                            <div class="col-12" id="products">
                                <h3>Products</h3>
                                @foreach (var product in _requestModel.Products.Select((value, index) => new { index, value }))
                                {
                                    var idName = $"{product.value.Name}-{product.index}-Name";
                                    var idLegalBasisForTaxExemption = $"{product.value.LegalBasisForTaxExemption}-{product.index}-LegalBasisForTaxExemption";
                                    var idPriceNet = $"{product.value.Name}-{product.index}-Name";
                                    var idNumberOfUnits = $"{product.value.Name}-{product.index}-Name";
                                    var idUnitName = $"{product.value.Name}-{product.index}-Name";
                                    var idVat = $"{product.value.Name}-{product.index}-Name";
                                    var idIsVatZw = $"{product.value.Name}-{product.index}-IsVatZw";
                            
                                    <div class="row g-2">
                                        <div class="col-4">
                                            <InputText class="w-100" id="@idName" @bind-Value="_requestModel.Products.ToList()[product.index].Name"/>
                                            <label for="@idName">Name</label>
                                            <ValidationMessage For="@(() => _requestModel.Products.ToList()[product.index].Name)"></ValidationMessage>
                                        </div>
                            
                                        <div class="col-4">
                                            <InputText class="w-100" id="@idLegalBasisForTaxExemption" @bind-Value="_requestModel.Products.ToList()[product.index].LegalBasisForTaxExemption"/>
                                            <label for="@idLegalBasisForTaxExemption">Tax Exemption Basis</label>
                                            <ValidationMessage For="@(() => _requestModel.Products.ToList()[product.index].LegalBasisForTaxExemption)"></ValidationMessage>
                                        </div>
                            
                                        <div class="col-2">
                                            <InputNumber class="w-100" id="@idPriceNet" @bind-Value="_requestModel.Products.ToList()[product.index].PriceNet"/>
                                            <label for="@idPriceNet">Price per Unit</label>
                                            <ValidationMessage For="@(() => _requestModel.Products.ToList()[product.index].PriceNet)"></ValidationMessage>
                                        </div>
                            
                                        <div class="col-1">
                                            <InputNumber class="w-100" id="@idNumberOfUnits" @bind-Value="_requestModel.Products.ToList()[product.index].NumberOfUnits"/>
                                            <label for="@idNumberOfUnits">Units</label>
                                            <ValidationMessage For="@(() => _requestModel.Products.ToList()[product.index].NumberOfUnits)"></ValidationMessage>
                                        </div>
                            
                                        <div class="col-1">
                                            <InputText class="w-100" id="@idUnitName" @bind-Value="_requestModel.Products.ToList()[product.index].UnitName"/>
                                            <label for="@idUnitName">Unit Name</label>
                                            <ValidationMessage For="@(() => _requestModel.Products.ToList()[product.index].UnitName)"></ValidationMessage>
                                        </div>
                            
                                        <div class="col-1">
                                            <InputNumber class="w-100" id="@idVat" @bind-Value="_requestModel.Products.ToList()[product.index].Vat"/>
                                            <label for="@idVat">Vat</label>
                                            <ValidationMessage For="@(() => _requestModel.Products.ToList()[product.index].Vat)"></ValidationMessage>
                                        </div>
                            
                                        <div class="col-1">
                                            <InputCheckbox class="w-100" id="@idIsVatZw" @bind-Value="_requestModel.Products.ToList()[product.index].IsVatZw"/>
                                            <label for="@idIsVatZw">Is Vat Zw</label>
                                            <ValidationMessage For="@(() => _requestModel.Products.ToList()[product.index].IsVatZw)"></ValidationMessage>
                                        </div>
                                    </div>
                                }
                            
                                <button type="button" class="btn btn-primary" @onclick="() => AddProduct()">Add Product</button>
                            </div>
                        </div>
                    </EditForm>
                </div>

            </div>
            <div class="row">
                <div class="modal-footer col-12">
                    <button type="submit" class="btn btn-primary" @onclick="() => Create()">Save changes</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Close()">Close</button>
                </div>
            </div>
        </div>
    </div>
</div>




@if (_showBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter]
    public EventCallback<Invoice> OnInvoiceAdded { get; set; }

    private string _addModalDisplay = "none;";
    private string _addModalClass = "";
    private bool _showBackdrop;

    private InvoiceRequestModel _requestModel = new InvoiceRequestModel 
    {
        InvoiceNumber = string.Empty,
        DateOfInvoice = DateTime.Now,
        DateOfRelease = DateTime.Now,
        DateOfPayment = DateTime.Now.AddDays(14),
        FormOfPayment = string.Empty,
        AccountNumber = string.Empty,
        IsPaymentDivided = false,
        IsPaid = false,
        Remarks = string.Empty,
        Seller = new ContractorRequestModel {Name = string.Empty, AddressStreet = string.Empty, AddressPostCity = string.Empty, AddressCountry = string.Empty, AddressPostCode = string.Empty, AddressBuildingNumber = string.Empty, AddressFlatNumber = string.Empty, Nip = string.Empty},
        Buyer = new ContractorRequestModel {Name = string.Empty, AddressStreet = string.Empty, AddressPostCity = string.Empty, AddressCountry = string.Empty, AddressPostCode = string.Empty, AddressBuildingNumber = string.Empty, AddressFlatNumber = string.Empty, Nip = string.Empty},
        Products = new List<ProductRequestModel>()
    };
    
    private InvoiceRequestModel CloneInvoiceData(Invoice invoiceToClone)
    {
        return new InvoiceRequestModel
        {
            InvoiceNumber = invoiceToClone.InvoiceNumber.Value ?? string.Empty,
            DateOfInvoice = invoiceToClone.DateOfInvoice.Value,
            DateOfRelease = invoiceToClone.DateOfRelease.Value,
            DateOfPayment = invoiceToClone.DateOfPayment.Value,
            FormOfPayment = invoiceToClone.FormOfPayment?.Value ?? string.Empty,
            AccountNumber = invoiceToClone.AccountNumber?.Value ?? string.Empty,
            IsPaymentDivided = invoiceToClone.IsPaymentDivided.Value,
            IsPaid = invoiceToClone.IsPaid.Value,
            Remarks = invoiceToClone.Remarks?.Value ?? string.Empty,
            Seller = new ContractorRequestModel
            {
                Name = invoiceToClone.Seller.Name.Value ?? string.Empty, 
                AddressStreet = invoiceToClone.Seller.Address.Street.Value ?? string.Empty, 
                AddressPostCity = invoiceToClone.Seller.Address.PostCity.Value ?? string.Empty, 
                AddressCountry = invoiceToClone.Seller.Address.Country.Value ?? string.Empty, 
                AddressPostCode = invoiceToClone.Seller.Address.PostCode.Value ?? string.Empty, 
                AddressBuildingNumber = invoiceToClone.Seller.Address.BuildingNumber.Value ?? string.Empty, 
                AddressFlatNumber = invoiceToClone.Seller.Address.FlatNumber?.Value ?? string.Empty, 
                Nip = invoiceToClone.Seller.Nip.Value ?? string.Empty
            },
            Buyer = new ContractorRequestModel 
            {
                Name = invoiceToClone.Buyer.Name.Value ?? string.Empty,
                AddressStreet = invoiceToClone.Buyer.Address.Street.Value ?? string.Empty,
                AddressPostCity = invoiceToClone.Buyer.Address.PostCity.Value ?? string.Empty,
                AddressCountry = invoiceToClone.Buyer.Address.Country.Value ?? string.Empty,
                AddressPostCode = invoiceToClone.Buyer.Address.PostCode.Value ?? string.Empty,
                AddressBuildingNumber = invoiceToClone.Buyer.Address.BuildingNumber.Value ?? string.Empty,
                AddressFlatNumber = invoiceToClone.Buyer.Address.FlatNumber?.Value ?? string.Empty,
                Nip = invoiceToClone.Buyer.Nip.Value ?? string.Empty
        
            },
            Products = invoiceToClone.Products.Select(product => new ProductRequestModel
            {
                Name = product.Product.Name.Value ?? string.Empty,
                PriceNet = product.Product.PriceNet.Value,
                NumberOfUnits = product.NumberOfUnits.Value,
                UnitName = product.Product.UnitName.Value ?? string.Empty,
                Vat = product.Product.Vat.Value,
                IsVatZw = product.Product.IsVatZw.Value,
                PriceGross = product.Product.PriceGross.Value,
                LegalBasisForTaxExemption = product.Product.LegalBasisForTaxExemption?.Value ?? string.Empty
            }).ToList()
        };
    }

    public void Open()
    {
        _addModalDisplay = "block;";
        _addModalClass = "Show";
        _showBackdrop = true;
        StateHasChanged();
    }
    
    public void Open(Invoice invoiceToClone)
    {
        _addModalDisplay = "block;";
        _addModalClass = "Show";
        _showBackdrop = true;
        _requestModel = CloneInvoiceData(invoiceToClone);
        StateHasChanged();
    }

    private void Close()
    {
        _addModalDisplay = "none";
        _addModalClass = "";
        _showBackdrop = false;
        StateHasChanged();
    }
    
    private void AddProduct()
    {
        _requestModel.Products.Add(new ProductRequestModel
        { Name = string.Empty, PriceNet = 0, NumberOfUnits = 1, UnitName = string.Empty, Vat = 23, PriceGross = 0 });
    }

    private async Task Create()
    {
        var invoice = _requestModel.ToDomainModel();
        await _mediator.Send(new CreateInvoiceCommand { Invoice = invoice });
        await OnInvoiceAdded.InvokeAsync(invoice);
        Close();
    }
}