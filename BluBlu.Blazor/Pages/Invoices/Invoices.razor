@page "/fetch-invoices"
@layout AdminLayout
@using MediatR;
@using MongoDB.Driver
@using BluBlu.Blazor.Shared.Layouts
@using BluBlu.Invoices.Domain.InvoicesAggregate
@using BluBlu.Invoices.Domain.InvoicesAggregate.Commands.CreatePdf
@using BluBlu.Invoices.Domain.InvoicesAggregate.Commands.Delete
@using BluBlu.Invoices.Domain.InvoicesAggregate.Commands.Update
@using BluBlu.Invoices.Domain.InvoicesAggregate.Queries.GetAll
@using BluBlu.Invoices.Domain.InvoicesAggregate.Queries.GetById

@inject IMediator _mediator
@inject NavigationManager _navigationManager

<AuthorizeView>    
    <Authorized> 
        @if (_invoices == null)
        {
            <p>
                <em>Loading...</em>
            </p>
        }
        else
        {
            <h1>@Error</h1>
            <AddModal @ref="AddModal" OnInvoiceAdded="@HandleAddInvoice"></AddModal>
            <UpdateModal @ref="UpdateModal" OnInvoiceAdded="@HandleUpdateInvoice"></UpdateModal>
            <button @onclick="() => AddModal.Open()" type="button" class="btn btn-success w-25">Add</button>
            
            <table class="table">
                <thead>
                <tr>
                    <th>Invoice Number</th>
                    <th>Seller</th>
                    <th>Buyer</th>
                    <th>Date of Payment</th>
                    <th>Actions</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var invoice in _invoices)
                {
                    <tr>
                        <td>@invoice.InvoiceNumber</td>
                        <td>@invoice.Seller.Name</td>
                        <td>@invoice.Buyer.Name</td>
                        <td>@invoice.DateOfPayment</td>
                        <td>
                            <button type="button" class="btn @(invoice.IsPaid ? "btn-success" : "btn-warning") btn-success me-2 w-">Paid</button>
                            <button type="button" @onclick="() => CreatePdf(invoice, true)" class="btn btn-info w-25">Generate</button>
                            <button type="button" @onclick="() => CreatePdf(invoice, false)" class="btn btn-info w-25">Generate (NoLogo)</button>
                            <button type="button" @onclick="() => Delete(invoice.Id)" class="btn btn-danger me-2 w-25">Delete</button>
                            <button type="button" @onclick="() => AddModal.Open(invoice, _invoices)" class="btn btn-danger me-2 w-25">Add Similar</button>
                            <button type="button" @onclick="() => UpdateModal.Open(invoice, _invoices)" class="btn btn-danger me-2 w-25">Update</button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        }
    </Authorized>
    <NotAuthorized>
        @{ _navigationManager.NavigateTo("/403"); }
    </NotAuthorized>
</AuthorizeView>
@code {
    private List<Invoice> _invoices = new();
    private AddModal AddModal { get; set; } = new();
    private UpdateModal UpdateModal { get; set; } = new();
    private string Error { get; set; } = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            _invoices = await GetAll();
        }
        catch (Exception e)
        {
            Error = e.Message;
            Console.WriteLine(e);
        }
    }
    
    private async Task<List<Invoice>> GetAll()
    {
        return await _mediator.Send(new GetAllInvoicesQuery());
    }
    
    private async Task<Invoice> GetById(string id)
    {
        return await _mediator.Send(new GetInvoiceByIdQuery { Id = id });
    }

    private async Task<Invoice> Update(string id, Invoice invoice)
    {
        return await _mediator.Send(new UpdateInvoiceCommand { Id = id, Invoice = invoice });
    }

    private async Task<DeleteResult> Delete(string id)
    {
        var result = await _mediator.Send(new DeleteInvoiceCommand { Id = id });

        if (!result.IsAcknowledged) return result;
        
        _invoices.Clear();
        _invoices = await GetAll();

        return result;
    }

    private async Task<Unit> CreatePdf(Invoice invoice, bool isWithLogo)
    {
        await _mediator.Send(new CreatePdfCommand { Invoice = invoice, IsWithLogo = isWithLogo, NavigationManager = _navigationManager});
        _navigationManager.NavigateTo($"api/DownloadPdf/{invoice.InvoiceNumber}", true);
        return Unit.Value;
    }

    private async Task HandleAddInvoice(Invoice invoice)
    {
        _invoices.Clear();
        _invoices = await GetAll();
    }
    
    private async Task HandleUpdateInvoice(Invoice invoice)
    {
        _invoices.Clear();
        _invoices = await GetAll();
    }
}